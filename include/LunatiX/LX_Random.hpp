
/*
*   Copyright © 2018 Luxon Jean-Pierre
*   https://gumichan01.github.io/
*
*   LunatiX is a free, SDL2-based library.
*   It can be used for open-source or commercial games thanks to the zlib/libpng license.
*
*   Luxon Jean-Pierre (Gumichan01)
*   luxon.jean.pierre@gmail.com
*/

#ifndef LX_RANDOM_HPP_INCLUDED
#define LX_RANDOM_HPP_INCLUDED

/**
*   @file LX_Random.hpp
*   @brief The Random Number Generator library
*   @author Luxon Jean-Pierre(Gumichan01)
*   @version 0.13
*/

#include <type_traits>
#include <limits>


/**
*   @ingroup System
*   @namespace LX_Random
*   @brief The Random Number Generator (RNG) namespace
*
*   This random number generator can be used using the Xorshift* generator,
*   or the standard C generator.
*/
namespace LX_Random
{

/**
*   @fn void initRand() noexcept
*   Initializes the random number generator
*   setting a seed
*/
void initRand() noexcept;

/**
*   @typedef template <typename Num> LX_Num
*   @brief Statically define a positive Number
*   @param Num
*/
template <typename N>
using LX_Num =
    typename std::enable_if< std::is_integral< N >::value &&
    std::is_unsigned< N >::value &&
    !std::is_same< N, bool >::value &&
    !std::is_same< N, unsigned char >::value, N >::type;

/**
*   @fn template <typename T> LX_Num<T> xrand(T min = 0, T max = std::numeric_limits<T>::max()) noexcept
*   Returns a pseudorandom number between min and max
*
*   @param min
*   @param max
*
*   @return An integer value between min and max
*
*   @pre min >= 0 ∧ min < max
*
*   @note This function uses the Xorshift* Random Number generator
*/
template <typename T>
LX_Num<T> xrand(T min = 0U, T max = std::numeric_limits< T >::max()) noexcept;


/**
*   @fn float fxrand(float minf = 0.0f, float maxf = 1.0f) noexcept
*   Returns a pseudorandom number between min andf maxf
*
*   @param minf
*   @param maxf
*
*   @return An integer value between minf and maxf
*
*   @pre minf >= 0.0f ∧ minf < maxf
*
*   @note This function uses the Xorshift* Random Number generator
*/
float fxrand(float minf = 0.0f, float maxf = 1.0f) noexcept;

/**
*   @deprecated xorshiftRand() is deprecated and will be removed in v0.14.0
*   Please use ::xrand() instead.
*
*   @fn unsigned long long xorshiftRand() noexcept
*   Returns a pseudorandom number between 0 and (2⁶⁴ - 1)
*   @return An integer value between 0 and 2⁶⁴ - 1
*
*   @note This function uses the Xorshift* generator
*/
unsigned long long xorshiftRand() noexcept;

/**
*   @deprecated crand() is deprecated and will be removed in v0.14.0
*   Please use ::xrand() instead.
*
*   @fn int crand() noexcept
*
*   Returns a pseudorandom number between 0 and RAND_MAX (at least 32767)
*
*   @return An integer value between 0 and RAND_MAX
*   @note This function uses the standard C generator
*/
int crand() noexcept;

/**
*   @deprecated xorshiftRand100() is deprecated and will be removed in v0.14.0
*
*   @fn unsigned long long xorshiftRand100() noexcept
*   Xorshift random value between 0 and 100
*   @return A random value generated by the Xorshift* RNG
*/
inline unsigned long long xorshiftRand100() noexcept
{
    return LX_Random::xorshiftRand() % 100;
}

/**
*   @deprecated crand100() is deprecated and will be removed in v0.14.0
*   Please use ::xrand() instead.
*
*   @fn inline int crand100() noexcept
*   C random value between 0 and 100
*   @return A random value generated by the standard C RNG
*/
inline int crand100() noexcept
{
    return LX_Random::crand() % 100;
}

#include "LX_Random.tpp"

}

#endif // LX_RANDOM_HPP_INCLUDED
